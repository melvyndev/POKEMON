{"ast":null,"code":"(function () {\n  'use strict';\n\n  var collator;\n  try {\n    collator = typeof Intl !== \"undefined\" && typeof Intl.Collator !== \"undefined\" ? Intl.Collator(\"generic\", {\n      sensitivity: \"base\"\n    }) : null;\n  } catch (err) {\n    console.log(\"Collator could not be initialized and wouldn't be used\");\n  }\n  var levenshtein = require('fastest-levenshtein');\n\n  // arrays to re-use\n  var prevRow = [],\n    str2Char = [];\n\n  /**\n   * Based on the algorithm at http://en.wikipedia.org/wiki/Levenshtein_distance.\n   */\n  var Levenshtein = {\n    /**\n     * Calculate levenshtein distance of the two strings.\n     *\n     * @param str1 String the first string.\n     * @param str2 String the second string.\n     * @param [options] Additional options.\n     * @param [options.useCollator] Use `Intl.Collator` for locale-sensitive string comparison.\n     * @return Integer the levenshtein distance (0 and above).\n     */\n    get: function (str1, str2, options) {\n      var useCollator = options && collator && options.useCollator;\n      if (useCollator) {\n        var str1Len = str1.length,\n          str2Len = str2.length;\n\n        // base cases\n        if (str1Len === 0) return str2Len;\n        if (str2Len === 0) return str1Len;\n\n        // two rows\n        var curCol, nextCol, i, j, tmp;\n\n        // initialise previous row\n        for (i = 0; i < str2Len; ++i) {\n          prevRow[i] = i;\n          str2Char[i] = str2.charCodeAt(i);\n        }\n        prevRow[str2Len] = str2Len;\n        var strCmp;\n        // calculate current row distance from previous row using collator\n        for (i = 0; i < str1Len; ++i) {\n          nextCol = i + 1;\n          for (j = 0; j < str2Len; ++j) {\n            curCol = nextCol;\n\n            // substution\n            strCmp = 0 === collator.compare(str1.charAt(i), String.fromCharCode(str2Char[j]));\n            nextCol = prevRow[j] + (strCmp ? 0 : 1);\n\n            // insertion\n            tmp = curCol + 1;\n            if (nextCol > tmp) {\n              nextCol = tmp;\n            }\n            // deletion\n            tmp = prevRow[j + 1] + 1;\n            if (nextCol > tmp) {\n              nextCol = tmp;\n            }\n\n            // copy current col value into previous (in preparation for next iteration)\n            prevRow[j] = curCol;\n          }\n\n          // copy last col value into previous (in preparation for next iteration)\n          prevRow[j] = nextCol;\n        }\n        return nextCol;\n      }\n      return levenshtein.distance(str1, str2);\n    }\n  };\n\n  // amd\n  if (typeof define !== \"undefined\" && define !== null && define.amd) {\n    define(function () {\n      return Levenshtein;\n    });\n  }\n  // commonjs\n  else if (typeof module !== \"undefined\" && module !== null && typeof exports !== \"undefined\" && module.exports === exports) {\n    module.exports = Levenshtein;\n  }\n  // web worker\n  else if (typeof self !== \"undefined\" && typeof self.postMessage === 'function' && typeof self.importScripts === 'function') {\n    self.Levenshtein = Levenshtein;\n  }\n  // browser main thread\n  else if (typeof window !== \"undefined\" && window !== null) {\n    window.Levenshtein = Levenshtein;\n  }\n})();","map":{"version":3,"names":["collator","Intl","Collator","sensitivity","err","console","log","levenshtein","require","prevRow","str2Char","Levenshtein","get","str1","str2","options","useCollator","str1Len","length","str2Len","curCol","nextCol","i","j","tmp","charCodeAt","strCmp","compare","charAt","String","fromCharCode","distance","define","amd","module","exports","self","postMessage","importScripts","window"],"sources":["C:/Users/Fariziala/Desktop/SITE/pokemon/node_modules/fast-levenshtein/levenshtein.js"],"sourcesContent":["(function() {\n  'use strict';\n  \n  var collator;\n  try {\n    collator = (typeof Intl !== \"undefined\" && typeof Intl.Collator !== \"undefined\") ? Intl.Collator(\"generic\", { sensitivity: \"base\" }) : null;\n  } catch (err){\n    console.log(\"Collator could not be initialized and wouldn't be used\");\n  }\n\n  var levenshtein = require('fastest-levenshtein');\n\n  // arrays to re-use\n  var prevRow = [],\n    str2Char = [];\n  \n  /**\n   * Based on the algorithm at http://en.wikipedia.org/wiki/Levenshtein_distance.\n   */\n  var Levenshtein = {\n    /**\n     * Calculate levenshtein distance of the two strings.\n     *\n     * @param str1 String the first string.\n     * @param str2 String the second string.\n     * @param [options] Additional options.\n     * @param [options.useCollator] Use `Intl.Collator` for locale-sensitive string comparison.\n     * @return Integer the levenshtein distance (0 and above).\n     */\n    get: function(str1, str2, options) {\n      var useCollator = (options && collator && options.useCollator);\n      \n      if (useCollator) {\n        var str1Len = str1.length,\n          str2Len = str2.length;\n        \n        // base cases\n        if (str1Len === 0) return str2Len;\n        if (str2Len === 0) return str1Len;\n\n        // two rows\n        var curCol, nextCol, i, j, tmp;\n\n        // initialise previous row\n        for (i=0; i<str2Len; ++i) {\n          prevRow[i] = i;\n          str2Char[i] = str2.charCodeAt(i);\n        }\n        prevRow[str2Len] = str2Len;\n\n        var strCmp;\n        // calculate current row distance from previous row using collator\n        for (i = 0; i < str1Len; ++i) {\n          nextCol = i + 1;\n\n          for (j = 0; j < str2Len; ++j) {\n            curCol = nextCol;\n\n            // substution\n            strCmp = 0 === collator.compare(str1.charAt(i), String.fromCharCode(str2Char[j]));\n\n            nextCol = prevRow[j] + (strCmp ? 0 : 1);\n\n            // insertion\n            tmp = curCol + 1;\n            if (nextCol > tmp) {\n              nextCol = tmp;\n            }\n            // deletion\n            tmp = prevRow[j + 1] + 1;\n            if (nextCol > tmp) {\n              nextCol = tmp;\n            }\n\n            // copy current col value into previous (in preparation for next iteration)\n            prevRow[j] = curCol;\n          }\n\n          // copy last col value into previous (in preparation for next iteration)\n          prevRow[j] = nextCol;\n        }\n        return nextCol;\n      }\n      return levenshtein.distance(str1, str2);\n    }\n\n  };\n\n  // amd\n  if (typeof define !== \"undefined\" && define !== null && define.amd) {\n    define(function() {\n      return Levenshtein;\n    });\n  }\n  // commonjs\n  else if (typeof module !== \"undefined\" && module !== null && typeof exports !== \"undefined\" && module.exports === exports) {\n    module.exports = Levenshtein;\n  }\n  // web worker\n  else if (typeof self !== \"undefined\" && typeof self.postMessage === 'function' && typeof self.importScripts === 'function') {\n    self.Levenshtein = Levenshtein;\n  }\n  // browser main thread\n  else if (typeof window !== \"undefined\" && window !== null) {\n    window.Levenshtein = Levenshtein;\n  }\n}());\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}