{"ast":null,"code":"import axios from 'axios';\nimport levenshtein from 'fast-levenshtein';\nclass PokemonService {\n  static async getPokemons() {\n    try {\n      const response = await axios.get('https://pokeapi.co/api/v2/pokemon?limit=100&offset=0&language=fr');\n      const fetchedPokemons = await Promise.all(response.data.results.map(async pokemon => {\n        const detailsResponse = await axios.get(pokemon.url);\n        return PokemonService.mapPokemon(detailsResponse.data);\n      }));\n      return fetchedPokemons;\n    } catch (error) {\n      console.error('Error fetching Pokemon data:', error);\n      throw new Error('Internal Server Error');\n    }\n  }\n  static async getPokemonById(id) {\n    try {\n      const response = await axios.get(`https://pokeapi.co/api/v2/pokemon/${id}`);\n      return PokemonService.mapPokemon(response.data);\n    } catch (error) {\n      console.error('Error fetching Pokemon data:', error);\n      throw new Error('Internal Server Error');\n    }\n  }\n  static async addPokemon(newPokemon) {\n    try {\n      const response = await axios.post(`http://localhost:3000/pokemon/}`, newPokemon);\n      return PokemonService.mapPokemon(response.data);\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du Pokémon :', error);\n      throw new Error('Internal Server Error');\n    }\n  }\n  static async deletePokemon(id) {\n    try {\n      await axios.delete(`http://localhost:3000/pokemon/${id}`);\n    } catch (error) {\n      console.error('Erreur lors de la suppression du Pokémon :', error);\n      throw new Error('Internal Server Error');\n    }\n  }\n  static async updatePokemon(id, updatedPokemon) {\n    try {\n      // Récupérer le Pokémon existant\n      const existingPokemon = await axios.get(`http://localhost:3000/pokemon/${id}`);\n\n      // Fusionner les données existantes avec les données mises à jour\n      const mergedPokemon = {\n        ...existingPokemon.data,\n        ...updatedPokemon\n      };\n\n      // Effectuer la mise à jour via une requête PUT ou PATCH\n      const response = await axios.put(`http://localhost:3000/pokemon/${id}`, mergedPokemon);\n      return PokemonService.mapPokemon(response.data);\n    } catch (error) {\n      console.error('Erreur lors de la mise à jour du Pokémon :', error);\n      throw new Error('Internal Server Error');\n    }\n  }\n  static async searchPokemon(name) {\n    try {\n      console.log('Searching for Pokemon:', name);\n      const response = await axios.get('https://pokeapi.co/api/v2/pokemon?limit=1000');\n      console.log('API Response:', response.data);\n      const allPokemons = await Promise.all(response.data.results.map(async pokemon => {\n        const detailsResponse = await axios.get(pokemon.url);\n        return PokemonService.mapPokemon(detailsResponse.data);\n      }));\n\n      // Filtrez les pokémons en fonction de la similarité du nom\n      const matchingPokemons = allPokemons.filter(pokemon => {\n        const similarity = levenshtein.get(name.toLowerCase(), pokemon.name.toLowerCase());\n        // Vous pouvez ajuster le seuil de similarité en fonction de vos besoins\n        return similarity <= 3; // Exemple : similitude maximale de 3 caractères\n      });\n      return matchingPokemons;\n    } catch (error) {\n      console.error('Error during Pokemon search:', error);\n      throw new Error('Internal Server Error');\n    }\n  }\n  static mapPokemon(data) {\n    return {\n      id: data.id,\n      name: data.name,\n      hp: data.stats[0].base_stat,\n      cp: data.stats[1].base_stat,\n      picture: data.sprites.front_default,\n      types: data.types.map(type => type.type.name),\n      created: new Date()\n    };\n  }\n}\nexport default PokemonService;","map":{"version":3,"names":["axios","levenshtein","PokemonService","getPokemons","response","get","fetchedPokemons","Promise","all","data","results","map","pokemon","detailsResponse","url","mapPokemon","error","console","Error","getPokemonById","id","addPokemon","newPokemon","post","deletePokemon","delete","updatePokemon","updatedPokemon","existingPokemon","mergedPokemon","put","searchPokemon","name","log","allPokemons","matchingPokemons","filter","similarity","toLowerCase","hp","stats","base_stat","cp","picture","sprites","front_default","types","type","created","Date"],"sources":["C:/Users/Fariziala/Desktop/SITE/pokemon/src/models/pokemon-service.ts"],"sourcesContent":["import axios from 'axios';\r\nimport levenshtein from 'fast-levenshtein';\r\n\r\ninterface Pokemon {\r\n  id: number;\r\n  name: string;\r\n  hp: number;\r\n  cp: number;\r\n  picture: string;\r\n  types: string[];\r\n  created: Date;\r\n}\r\n\r\nclass PokemonService {\r\n  static async getPokemons(): Promise<Pokemon[]> {\r\n    try {\r\n      const response = await axios.get('https://pokeapi.co/api/v2/pokemon?limit=100&offset=0&language=fr');\r\n      const fetchedPokemons = await Promise.all(response.data.results.map(async (pokemon: any) => {\r\n        const detailsResponse = await axios.get(pokemon.url);\r\n        return PokemonService.mapPokemon(detailsResponse.data);\r\n      }));\r\n      return fetchedPokemons;\r\n    } catch (error) {\r\n      console.error('Error fetching Pokemon data:', error);\r\n      throw new Error('Internal Server Error');\r\n    }\r\n  }\r\n\r\n  static async getPokemonById(id: number): Promise<Pokemon> {\r\n    try {\r\n      const response = await axios.get(`https://pokeapi.co/api/v2/pokemon/${id}`);\r\n      return PokemonService.mapPokemon(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching Pokemon data:', error);\r\n      throw new Error('Internal Server Error');\r\n    }\r\n  }\r\n  static async addPokemon(newPokemon: Pokemon): Promise<Pokemon> {\r\n    try {\r\n      const response = await axios.post(`http://localhost:3000/pokemon/}`, newPokemon);\r\n      return PokemonService.mapPokemon(response.data);\r\n    } catch (error) {\r\n      console.error('Erreur lors de l\\'ajout du Pokémon :', error);\r\n      throw new Error('Internal Server Error');\r\n    }\r\n  }\r\n\r\n  static async deletePokemon(id: number): Promise<void> {\r\n    try {\r\n      await axios.delete(`http://localhost:3000/pokemon/${id}`);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la suppression du Pokémon :', error);\r\n      throw new Error('Internal Server Error');\r\n    }\r\n  }\r\n\r\n  static async updatePokemon(id: number, updatedPokemon: Partial<Pokemon>): Promise<Pokemon> {\r\n    try {\r\n      // Récupérer le Pokémon existant\r\n      const existingPokemon = await axios.get(`http://localhost:3000/pokemon/${id}`);\r\n\r\n      // Fusionner les données existantes avec les données mises à jour\r\n      const mergedPokemon = { ...existingPokemon.data, ...updatedPokemon };\r\n\r\n      // Effectuer la mise à jour via une requête PUT ou PATCH\r\n      const response = await axios.put(`http://localhost:3000/pokemon/${id}`, mergedPokemon);\r\n\r\n      return PokemonService.mapPokemon(response.data);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la mise à jour du Pokémon :', error);\r\n      throw new Error('Internal Server Error');\r\n    }\r\n  }\r\n\r\n  static async searchPokemon(name: string): Promise<Pokemon[] | null> {\r\n    try {\r\n      console.log('Searching for Pokemon:', name);\r\n  \r\n      const response = await axios.get('https://pokeapi.co/api/v2/pokemon?limit=1000');\r\n  \r\n      console.log('API Response:', response.data);\r\n  \r\n      const allPokemons: Pokemon[] = await Promise.all(\r\n        response.data.results.map(async (pokemon: any) => {\r\n          const detailsResponse = await axios.get(pokemon.url);\r\n          return PokemonService.mapPokemon(detailsResponse.data);\r\n        })\r\n      );\r\n  \r\n      // Filtrez les pokémons en fonction de la similarité du nom\r\n      const matchingPokemons = allPokemons.filter((pokemon) => {\r\n        const similarity = levenshtein.get(name.toLowerCase(), pokemon.name.toLowerCase());\r\n        // Vous pouvez ajuster le seuil de similarité en fonction de vos besoins\r\n        return similarity <= 3; // Exemple : similitude maximale de 3 caractères\r\n      });\r\n  \r\n      return matchingPokemons;\r\n    } catch (error) {\r\n      console.error('Error during Pokemon search:', error);\r\n      throw new Error('Internal Server Error');\r\n    }\r\n  }\r\n\r\n  private static mapPokemon(data: any): Pokemon {\r\n    return {\r\n      id: data.id,\r\n      name: data.name,\r\n      hp: data.stats[0].base_stat,\r\n      cp: data.stats[1].base_stat,\r\n      picture: data.sprites.front_default,\r\n      types: data.types.map((type: any) => type.type.name),\r\n      created: new Date(),\r\n    };\r\n  }\r\n}\r\n\r\nexport default PokemonService;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}