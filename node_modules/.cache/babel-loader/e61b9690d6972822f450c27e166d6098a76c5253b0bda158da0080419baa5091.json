{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Fariziala\\\\Desktop\\\\SITE\\\\pokemon\\\\src\\\\components\\\\pokemon-form.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport formatType from '../helpers/format-type';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PokemonForm = ({\n  pokemon\n}) => {\n  _s();\n  const [form, setForm] = useState({\n    name: {\n      value: pokemon.name,\n      isValid: true\n    },\n    hp: {\n      value: pokemon.hp,\n      isValid: true\n    },\n    cp: {\n      value: pokemon.cp,\n      isValid: true\n    },\n    types: {\n      value: pokemon.types,\n      isValid: true\n    }\n  });\n  const hasType = type => {\n    return form.types.value.includes(type);\n  };\n  const handleCheckboxChange = type => {\n    setForm(prevForm => ({\n      ...prevForm,\n      types: {\n        ...prevForm.types,\n        value: prevForm.types.value.includes(type) ? prevForm.types.value.filter(t => t !== type) : [...prevForm.types.value, type]\n      }\n    }));\n  };\n\n  // ... (types et constantes existants)\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Types\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), types.map(type => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '10px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            id: type,\n            type: \"checkbox\",\n            value: type,\n            checked: hasType(type) // Utilisez la fonction hasType ici\n            ,\n            className: \"filled-in\",\n            onChange: () => handleCheckboxChange(type)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: formatType(type),\n              children: type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this)\n      }, type, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(PokemonForm, \"Yn26vZ2YMO7Zhi0GQrrW+FDbgiI=\");\n_c = PokemonForm;\nexport default PokemonForm;\nvar _c;\n$RefreshReg$(_c, \"PokemonForm\");","map":{"version":3,"names":["React","useState","formatType","jsxDEV","_jsxDEV","PokemonForm","pokemon","_s","form","setForm","name","value","isValid","hp","cp","types","hasType","type","includes","handleCheckboxChange","prevForm","filter","t","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","style","marginBottom","id","checked","onChange","_c","$RefreshReg$"],"sources":["C:/Users/Fariziala/Desktop/SITE/pokemon/src/components/pokemon-form.tsx"],"sourcesContent":["import React, { FunctionComponent, useState } from 'react';\r\nimport Pokemon from '../models/pokemon';\r\nimport formatType from '../helpers/format-type';\r\n  \r\ntype Props = {\r\n  pokemon: Pokemon\r\n};\r\n\r\ntype Field = {\r\n  value: any,\r\n  error?: string,\r\n  isValid:boolean,\r\n};\r\n\r\ntype Form = {\r\n  name: Field,\r\n  hp: Field,\r\n  cp:Field,\r\n  types:Field\r\n};\r\n  \r\nconst PokemonForm: FunctionComponent<Props> = ({ pokemon }) => {\r\n  const [form, setForm] = useState<Form>({\r\n    name: { value: pokemon.name, isValid: true },\r\n    hp: { value: pokemon.hp, isValid: true },\r\n    cp: { value: pokemon.cp, isValid: true },\r\n    types: { value: pokemon.types, isValid: true }\r\n  });\r\n\r\n  const hasType = (type: string): boolean => {\r\n    return form.types.value.includes(type);\r\n  };\r\n\r\n  const handleCheckboxChange = (type: string) => {\r\n    setForm((prevForm) => ({\r\n      ...prevForm,\r\n      types: {\r\n        ...prevForm.types,\r\n        value: prevForm.types.value.includes(type)\r\n          ? prevForm.types.value.filter((t) => t !== type)\r\n          : [...prevForm.types.value, type]\r\n      }\r\n    }));\r\n  };\r\n\r\n  // ... (types et constantes existants)\r\n\r\n  return (\r\n    <form>\r\n      {/* ... (code existant) */}\r\n      {/* Types de Pok√©mon */}\r\n      <div className=\"form-group\">\r\n        <label>Types</label>\r\n        {types.map((type) => (\r\n          <div key={type} style={{ marginBottom: '10px' }}>\r\n            <label>\r\n              <input\r\n                id={type}\r\n                type=\"checkbox\"\r\n                value={type}\r\n                checked={hasType(type)}  // Utilisez la fonction hasType ici\r\n                className=\"filled-in\"\r\n                onChange={() => handleCheckboxChange(type)}\r\n              />\r\n              <span>\r\n                <p className={formatType(type)}>{type}</p>\r\n              </span>\r\n            </label>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      {/* ... (code existant) */}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default PokemonForm;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}